/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 738.0, "minX": 0.0, "maxY": 47151.0, "series": [{"data": [[0.0, 738.0], [0.1, 803.0], [0.2, 882.0], [0.3, 904.0], [0.4, 1079.0], [0.5, 1096.0], [0.6, 1116.0], [0.7, 3680.0], [0.8, 4758.0], [0.9, 5212.0], [1.0, 5986.0], [1.1, 7065.0], [1.2, 7979.0], [1.3, 9113.0], [1.4, 9553.0], [1.5, 9672.0], [1.6, 9699.0], [1.7, 9926.0], [1.8, 10704.0], [1.9, 10926.0], [2.0, 11302.0], [2.1, 11608.0], [2.2, 11994.0], [2.3, 12228.0], [2.4, 12486.0], [2.5, 13009.0], [2.6, 13186.0], [2.7, 13394.0], [2.8, 13953.0], [2.9, 14079.0], [3.0, 14122.0], [3.1, 14166.0], [3.2, 14182.0], [3.3, 14416.0], [3.4, 14507.0], [3.5, 14574.0], [3.6, 14609.0], [3.7, 14949.0], [3.8, 15002.0], [3.9, 15082.0], [4.0, 15263.0], [4.1, 15397.0], [4.2, 15488.0], [4.3, 15809.0], [4.4, 15945.0], [4.5, 15964.0], [4.6, 16087.0], [4.7, 16128.0], [4.8, 16190.0], [4.9, 16249.0], [5.0, 16283.0], [5.1, 16302.0], [5.2, 16360.0], [5.3, 16375.0], [5.4, 16471.0], [5.5, 16532.0], [5.6, 16548.0], [5.7, 16609.0], [5.8, 16662.0], [5.9, 16700.0], [6.0, 16730.0], [6.1, 16776.0], [6.2, 16852.0], [6.3, 16911.0], [6.4, 17010.0], [6.5, 17063.0], [6.6, 17214.0], [6.7, 17300.0], [6.8, 17324.0], [6.9, 17353.0], [7.0, 17383.0], [7.1, 17416.0], [7.2, 17466.0], [7.3, 17551.0], [7.4, 17648.0], [7.5, 17736.0], [7.6, 17753.0], [7.7, 17794.0], [7.8, 17843.0], [7.9, 17888.0], [8.0, 17959.0], [8.1, 18019.0], [8.2, 18066.0], [8.3, 18233.0], [8.4, 18316.0], [8.5, 18357.0], [8.6, 18404.0], [8.7, 18474.0], [8.8, 18596.0], [8.9, 18621.0], [9.0, 18644.0], [9.1, 18676.0], [9.2, 18722.0], [9.3, 18795.0], [9.4, 18834.0], [9.5, 18868.0], [9.6, 19018.0], [9.7, 19079.0], [9.8, 19140.0], [9.9, 19187.0], [10.0, 19229.0], [10.1, 19281.0], [10.2, 19342.0], [10.3, 19425.0], [10.4, 19539.0], [10.5, 19577.0], [10.6, 19608.0], [10.7, 19683.0], [10.8, 19712.0], [10.9, 19741.0], [11.0, 19779.0], [11.1, 19793.0], [11.2, 19806.0], [11.3, 19845.0], [11.4, 19882.0], [11.5, 19905.0], [11.6, 19917.0], [11.7, 19954.0], [11.8, 19986.0], [11.9, 20013.0], [12.0, 20072.0], [12.1, 20083.0], [12.2, 20139.0], [12.3, 20206.0], [12.4, 20245.0], [12.5, 20296.0], [12.6, 20442.0], [12.7, 20495.0], [12.8, 20564.0], [12.9, 20606.0], [13.0, 20724.0], [13.1, 20766.0], [13.2, 20804.0], [13.3, 20822.0], [13.4, 20847.0], [13.5, 20868.0], [13.6, 20887.0], [13.7, 20928.0], [13.8, 20995.0], [13.9, 21049.0], [14.0, 21215.0], [14.1, 21278.0], [14.2, 21352.0], [14.3, 21450.0], [14.4, 21558.0], [14.5, 21600.0], [14.6, 21666.0], [14.7, 21710.0], [14.8, 21833.0], [14.9, 21861.0], [15.0, 21922.0], [15.1, 22066.0], [15.2, 22163.0], [15.3, 22263.0], [15.4, 22432.0], [15.5, 22553.0], [15.6, 22670.0], [15.7, 22795.0], [15.8, 22902.0], [15.9, 23000.0], [16.0, 23059.0], [16.1, 23170.0], [16.2, 23237.0], [16.3, 23396.0], [16.4, 23487.0], [16.5, 23548.0], [16.6, 23609.0], [16.7, 23692.0], [16.8, 23730.0], [16.9, 23819.0], [17.0, 23877.0], [17.1, 23942.0], [17.2, 24019.0], [17.3, 24099.0], [17.4, 24212.0], [17.5, 24249.0], [17.6, 24344.0], [17.7, 24402.0], [17.8, 24427.0], [17.9, 24440.0], [18.0, 24458.0], [18.1, 24470.0], [18.2, 24480.0], [18.3, 24484.0], [18.4, 24496.0], [18.5, 24505.0], [18.6, 24518.0], [18.7, 24520.0], [18.8, 24523.0], [18.9, 24525.0], [19.0, 24530.0], [19.1, 24535.0], [19.2, 24536.0], [19.3, 24539.0], [19.4, 24543.0], [19.5, 24544.0], [19.6, 24544.0], [19.7, 24550.0], [19.8, 24554.0], [19.9, 24556.0], [20.0, 24557.0], [20.1, 24558.0], [20.2, 24560.0], [20.3, 24563.0], [20.4, 24566.0], [20.5, 24570.0], [20.6, 24572.0], [20.7, 24573.0], [20.8, 24575.0], [20.9, 24578.0], [21.0, 24579.0], [21.1, 24581.0], [21.2, 24584.0], [21.3, 24588.0], [21.4, 24594.0], [21.5, 24599.0], [21.6, 24601.0], [21.7, 24605.0], [21.8, 24609.0], [21.9, 24612.0], [22.0, 24616.0], [22.1, 24621.0], [22.2, 24623.0], [22.3, 24627.0], [22.4, 24630.0], [22.5, 24634.0], [22.6, 24640.0], [22.7, 24642.0], [22.8, 24651.0], [22.9, 24661.0], [23.0, 24684.0], [23.1, 24703.0], [23.2, 24725.0], [23.3, 24751.0], [23.4, 24764.0], [23.5, 24769.0], [23.6, 24783.0], [23.7, 24793.0], [23.8, 24802.0], [23.9, 24808.0], [24.0, 24817.0], [24.1, 24820.0], [24.2, 24824.0], [24.3, 24838.0], [24.4, 24842.0], [24.5, 24854.0], [24.6, 24863.0], [24.7, 24873.0], [24.8, 24880.0], [24.9, 24897.0], [25.0, 24901.0], [25.1, 24915.0], [25.2, 24921.0], [25.3, 24958.0], [25.4, 24964.0], [25.5, 24969.0], [25.6, 24980.0], [25.7, 24984.0], [25.8, 25006.0], [25.9, 25027.0], [26.0, 25030.0], [26.1, 25043.0], [26.2, 25063.0], [26.3, 25068.0], [26.4, 25078.0], [26.5, 25082.0], [26.6, 25097.0], [26.7, 25106.0], [26.8, 25113.0], [26.9, 25116.0], [27.0, 25131.0], [27.1, 25139.0], [27.2, 25143.0], [27.3, 25148.0], [27.4, 25156.0], [27.5, 25160.0], [27.6, 25168.0], [27.7, 25173.0], [27.8, 25179.0], [27.9, 25184.0], [28.0, 25194.0], [28.1, 25204.0], [28.2, 25211.0], [28.3, 25220.0], [28.4, 25227.0], [28.5, 25237.0], [28.6, 25243.0], [28.7, 25249.0], [28.8, 25255.0], [28.9, 25264.0], [29.0, 25269.0], [29.1, 25278.0], [29.2, 25283.0], [29.3, 25286.0], [29.4, 25300.0], [29.5, 25308.0], [29.6, 25317.0], [29.7, 25323.0], [29.8, 25363.0], [29.9, 25466.0], [30.0, 25486.0], [30.1, 25510.0], [30.2, 25514.0], [30.3, 25520.0], [30.4, 25530.0], [30.5, 25542.0], [30.6, 25547.0], [30.7, 25553.0], [30.8, 25561.0], [30.9, 25563.0], [31.0, 25567.0], [31.1, 25571.0], [31.2, 25575.0], [31.3, 25584.0], [31.4, 25588.0], [31.5, 25592.0], [31.6, 25594.0], [31.7, 25598.0], [31.8, 25601.0], [31.9, 25603.0], [32.0, 25608.0], [32.1, 25610.0], [32.2, 25613.0], [32.3, 25618.0], [32.4, 25622.0], [32.5, 25625.0], [32.6, 25633.0], [32.7, 25638.0], [32.8, 25643.0], [32.9, 25649.0], [33.0, 25656.0], [33.1, 25662.0], [33.2, 25666.0], [33.3, 25668.0], [33.4, 25674.0], [33.5, 25682.0], [33.6, 25684.0], [33.7, 25689.0], [33.8, 25693.0], [33.9, 25702.0], [34.0, 25706.0], [34.1, 25716.0], [34.2, 25722.0], [34.3, 25726.0], [34.4, 25731.0], [34.5, 25745.0], [34.6, 25745.0], [34.7, 25755.0], [34.8, 25766.0], [34.9, 25771.0], [35.0, 25808.0], [35.1, 25818.0], [35.2, 25876.0], [35.3, 25921.0], [35.4, 25976.0], [35.5, 26029.0], [35.6, 26063.0], [35.7, 26096.0], [35.8, 26125.0], [35.9, 26166.0], [36.0, 26232.0], [36.1, 26256.0], [36.2, 26301.0], [36.3, 26314.0], [36.4, 26346.0], [36.5, 26421.0], [36.6, 26455.0], [36.7, 26499.0], [36.8, 26548.0], [36.9, 26582.0], [37.0, 26631.0], [37.1, 26858.0], [37.2, 26894.0], [37.3, 26902.0], [37.4, 26904.0], [37.5, 26912.0], [37.6, 26975.0], [37.7, 27009.0], [37.8, 27048.0], [37.9, 27076.0], [38.0, 27090.0], [38.1, 27176.0], [38.2, 27194.0], [38.3, 27211.0], [38.4, 27227.0], [38.5, 27238.0], [38.6, 27296.0], [38.7, 27314.0], [38.8, 27328.0], [38.9, 27415.0], [39.0, 27459.0], [39.1, 27542.0], [39.2, 27558.0], [39.3, 27573.0], [39.4, 27595.0], [39.5, 27613.0], [39.6, 27682.0], [39.7, 27701.0], [39.8, 27834.0], [39.9, 27938.0], [40.0, 27965.0], [40.1, 27974.0], [40.2, 28039.0], [40.3, 28124.0], [40.4, 28183.0], [40.5, 28269.0], [40.6, 28296.0], [40.7, 28348.0], [40.8, 28377.0], [40.9, 28400.0], [41.0, 28482.0], [41.1, 28556.0], [41.2, 28585.0], [41.3, 28605.0], [41.4, 28659.0], [41.5, 28710.0], [41.6, 28714.0], [41.7, 28729.0], [41.8, 28739.0], [41.9, 28756.0], [42.0, 28810.0], [42.1, 28873.0], [42.2, 28894.0], [42.3, 28918.0], [42.4, 28950.0], [42.5, 28965.0], [42.6, 28996.0], [42.7, 29015.0], [42.8, 29023.0], [42.9, 29043.0], [43.0, 29052.0], [43.1, 29082.0], [43.2, 29156.0], [43.3, 29202.0], [43.4, 29216.0], [43.5, 29233.0], [43.6, 29237.0], [43.7, 29240.0], [43.8, 29246.0], [43.9, 29259.0], [44.0, 29265.0], [44.1, 29270.0], [44.2, 29280.0], [44.3, 29296.0], [44.4, 29307.0], [44.5, 29341.0], [44.6, 29388.0], [44.7, 29397.0], [44.8, 29412.0], [44.9, 29440.0], [45.0, 29469.0], [45.1, 29484.0], [45.2, 29524.0], [45.3, 29783.0], [45.4, 29859.0], [45.5, 29941.0], [45.6, 30008.0], [45.7, 30023.0], [45.8, 30049.0], [45.9, 30072.0], [46.0, 30090.0], [46.1, 30153.0], [46.2, 30209.0], [46.3, 30237.0], [46.4, 30294.0], [46.5, 30401.0], [46.6, 30432.0], [46.7, 30529.0], [46.8, 30602.0], [46.9, 30631.0], [47.0, 30644.0], [47.1, 30666.0], [47.2, 30691.0], [47.3, 30730.0], [47.4, 30752.0], [47.5, 30779.0], [47.6, 30809.0], [47.7, 30836.0], [47.8, 30872.0], [47.9, 30955.0], [48.0, 30995.0], [48.1, 31018.0], [48.2, 31061.0], [48.3, 31068.0], [48.4, 31095.0], [48.5, 31105.0], [48.6, 31114.0], [48.7, 31126.0], [48.8, 31148.0], [48.9, 31171.0], [49.0, 31198.0], [49.1, 31237.0], [49.2, 31273.0], [49.3, 31299.0], [49.4, 31371.0], [49.5, 31385.0], [49.6, 31442.0], [49.7, 31492.0], [49.8, 31524.0], [49.9, 31550.0], [50.0, 31558.0], [50.1, 31566.0], [50.2, 31571.0], [50.3, 31577.0], [50.4, 31580.0], [50.5, 31583.0], [50.6, 31586.0], [50.7, 31588.0], [50.8, 31591.0], [50.9, 31595.0], [51.0, 31596.0], [51.1, 31597.0], [51.2, 31604.0], [51.3, 31608.0], [51.4, 31609.0], [51.5, 31613.0], [51.6, 31616.0], [51.7, 31620.0], [51.8, 31625.0], [51.9, 31630.0], [52.0, 31641.0], [52.1, 31644.0], [52.2, 31649.0], [52.3, 31651.0], [52.4, 31657.0], [52.5, 31658.0], [52.6, 31663.0], [52.7, 31669.0], [52.8, 31673.0], [52.9, 31675.0], [53.0, 31680.0], [53.1, 31682.0], [53.2, 31690.0], [53.3, 31693.0], [53.4, 31699.0], [53.5, 31707.0], [53.6, 31708.0], [53.7, 31714.0], [53.8, 31719.0], [53.9, 31723.0], [54.0, 31727.0], [54.1, 31732.0], [54.2, 31737.0], [54.3, 31741.0], [54.4, 31746.0], [54.5, 31752.0], [54.6, 31759.0], [54.7, 31763.0], [54.8, 31768.0], [54.9, 31782.0], [55.0, 31787.0], [55.1, 31791.0], [55.2, 31796.0], [55.3, 31802.0], [55.4, 31809.0], [55.5, 31812.0], [55.6, 31818.0], [55.7, 31823.0], [55.8, 31824.0], [55.9, 31827.0], [56.0, 31833.0], [56.1, 31836.0], [56.2, 31837.0], [56.3, 31844.0], [56.4, 31852.0], [56.5, 31861.0], [56.6, 31869.0], [56.7, 31871.0], [56.8, 31883.0], [56.9, 31901.0], [57.0, 31907.0], [57.1, 31910.0], [57.2, 31926.0], [57.3, 31948.0], [57.4, 31970.0], [57.5, 31980.0], [57.6, 31995.0], [57.7, 32001.0], [57.8, 32006.0], [57.9, 32012.0], [58.0, 32017.0], [58.1, 32020.0], [58.2, 32032.0], [58.3, 32049.0], [58.4, 32057.0], [58.5, 32063.0], [58.6, 32074.0], [58.7, 32082.0], [58.8, 32091.0], [58.9, 32094.0], [59.0, 32102.0], [59.1, 32107.0], [59.2, 32111.0], [59.3, 32119.0], [59.4, 32124.0], [59.5, 32133.0], [59.6, 32144.0], [59.7, 32153.0], [59.8, 32158.0], [59.9, 32162.0], [60.0, 32168.0], [60.1, 32170.0], [60.2, 32176.0], [60.3, 32184.0], [60.4, 32194.0], [60.5, 32203.0], [60.6, 32207.0], [60.7, 32212.0], [60.8, 32220.0], [60.9, 32226.0], [61.0, 32236.0], [61.1, 32239.0], [61.2, 32257.0], [61.3, 32270.0], [61.4, 32275.0], [61.5, 32281.0], [61.6, 32306.0], [61.7, 32313.0], [61.8, 32326.0], [61.9, 32335.0], [62.0, 32342.0], [62.1, 32351.0], [62.2, 32363.0], [62.3, 32381.0], [62.4, 32390.0], [62.5, 32396.0], [62.6, 32400.0], [62.7, 32407.0], [62.8, 32416.0], [62.9, 32422.0], [63.0, 32431.0], [63.1, 32441.0], [63.2, 32455.0], [63.3, 32473.0], [63.4, 32485.0], [63.5, 32514.0], [63.6, 32551.0], [63.7, 32567.0], [63.8, 32582.0], [63.9, 32587.0], [64.0, 32596.0], [64.1, 32613.0], [64.2, 32622.0], [64.3, 32631.0], [64.4, 32638.0], [64.5, 32652.0], [64.6, 32659.0], [64.7, 32682.0], [64.8, 32699.0], [64.9, 32739.0], [65.0, 32744.0], [65.1, 32757.0], [65.2, 32768.0], [65.3, 32777.0], [65.4, 32791.0], [65.5, 32797.0], [65.6, 32817.0], [65.7, 32837.0], [65.8, 32846.0], [65.9, 32862.0], [66.0, 32904.0], [66.1, 32919.0], [66.2, 32937.0], [66.3, 32958.0], [66.4, 32987.0], [66.5, 33002.0], [66.6, 33020.0], [66.7, 33049.0], [66.8, 33089.0], [66.9, 33122.0], [67.0, 33209.0], [67.1, 33249.0], [67.2, 33266.0], [67.3, 33289.0], [67.4, 33299.0], [67.5, 33332.0], [67.6, 33344.0], [67.7, 33344.0], [67.8, 33347.0], [67.9, 33375.0], [68.0, 33408.0], [68.1, 33428.0], [68.2, 33476.0], [68.3, 33494.0], [68.4, 33514.0], [68.5, 33543.0], [68.6, 33555.0], [68.7, 33587.0], [68.8, 33610.0], [68.9, 33636.0], [69.0, 33645.0], [69.1, 33690.0], [69.2, 33711.0], [69.3, 33740.0], [69.4, 33750.0], [69.5, 33766.0], [69.6, 33800.0], [69.7, 33810.0], [69.8, 33828.0], [69.9, 33836.0], [70.0, 33852.0], [70.1, 33871.0], [70.2, 33890.0], [70.3, 33900.0], [70.4, 33918.0], [70.5, 33929.0], [70.6, 33942.0], [70.7, 33961.0], [70.8, 33972.0], [70.9, 33988.0], [71.0, 34012.0], [71.1, 34023.0], [71.2, 34042.0], [71.3, 34071.0], [71.4, 34085.0], [71.5, 34101.0], [71.6, 34121.0], [71.7, 34131.0], [71.8, 34143.0], [71.9, 34182.0], [72.0, 34200.0], [72.1, 34207.0], [72.2, 34222.0], [72.3, 34231.0], [72.4, 34251.0], [72.5, 34281.0], [72.6, 34287.0], [72.7, 34301.0], [72.8, 34311.0], [72.9, 34324.0], [73.0, 34334.0], [73.1, 34360.0], [73.2, 34376.0], [73.3, 34403.0], [73.4, 34436.0], [73.5, 34452.0], [73.6, 34463.0], [73.7, 34494.0], [73.8, 34504.0], [73.9, 34525.0], [74.0, 34535.0], [74.1, 34549.0], [74.2, 34566.0], [74.3, 34579.0], [74.4, 34594.0], [74.5, 34619.0], [74.6, 34633.0], [74.7, 34642.0], [74.8, 34654.0], [74.9, 34675.0], [75.0, 34693.0], [75.1, 34703.0], [75.2, 34727.0], [75.3, 34749.0], [75.4, 34765.0], [75.5, 34798.0], [75.6, 34813.0], [75.7, 34826.0], [75.8, 34855.0], [75.9, 34873.0], [76.0, 34897.0], [76.1, 34924.0], [76.2, 34951.0], [76.3, 34976.0], [76.4, 34997.0], [76.5, 35026.0], [76.6, 35041.0], [76.7, 35076.0], [76.8, 35120.0], [76.9, 35164.0], [77.0, 35184.0], [77.1, 35206.0], [77.2, 35216.0], [77.3, 35233.0], [77.4, 35261.0], [77.5, 35271.0], [77.6, 35296.0], [77.7, 35321.0], [77.8, 35344.0], [77.9, 35377.0], [78.0, 35389.0], [78.1, 35407.0], [78.2, 35429.0], [78.3, 35474.0], [78.4, 35489.0], [78.5, 35502.0], [78.6, 35510.0], [78.7, 35531.0], [78.8, 35556.0], [78.9, 35587.0], [79.0, 35611.0], [79.1, 35640.0], [79.2, 35656.0], [79.3, 35681.0], [79.4, 35697.0], [79.5, 35707.0], [79.6, 35729.0], [79.7, 35738.0], [79.8, 35754.0], [79.9, 35768.0], [80.0, 35778.0], [80.1, 35781.0], [80.2, 35788.0], [80.3, 35793.0], [80.4, 35800.0], [80.5, 35803.0], [80.6, 35812.0], [80.7, 35818.0], [80.8, 35822.0], [80.9, 35840.0], [81.0, 35849.0], [81.1, 35856.0], [81.2, 35862.0], [81.3, 35878.0], [81.4, 35881.0], [81.5, 35887.0], [81.6, 35890.0], [81.7, 35894.0], [81.8, 35897.0], [81.9, 35905.0], [82.0, 35909.0], [82.1, 35921.0], [82.2, 35928.0], [82.3, 35938.0], [82.4, 35942.0], [82.5, 35951.0], [82.6, 35955.0], [82.7, 35959.0], [82.8, 35967.0], [82.9, 35975.0], [83.0, 35977.0], [83.1, 35982.0], [83.2, 35990.0], [83.3, 35995.0], [83.4, 36004.0], [83.5, 36008.0], [83.6, 36010.0], [83.7, 36013.0], [83.8, 36025.0], [83.9, 36029.0], [84.0, 36040.0], [84.1, 36046.0], [84.2, 36052.0], [84.3, 36060.0], [84.4, 36068.0], [84.5, 36071.0], [84.6, 36076.0], [84.7, 36087.0], [84.8, 36098.0], [84.9, 36103.0], [85.0, 36117.0], [85.1, 36122.0], [85.2, 36126.0], [85.3, 36130.0], [85.4, 36135.0], [85.5, 36139.0], [85.6, 36143.0], [85.7, 36148.0], [85.8, 36152.0], [85.9, 36158.0], [86.0, 36166.0], [86.1, 36173.0], [86.2, 36180.0], [86.3, 36191.0], [86.4, 36193.0], [86.5, 36202.0], [86.6, 36204.0], [86.7, 36210.0], [86.8, 36218.0], [86.9, 36225.0], [87.0, 36229.0], [87.1, 36238.0], [87.2, 36243.0], [87.3, 36250.0], [87.4, 36263.0], [87.5, 36274.0], [87.6, 36280.0], [87.7, 36286.0], [87.8, 36295.0], [87.9, 36311.0], [88.0, 36321.0], [88.1, 36331.0], [88.2, 36343.0], [88.3, 36352.0], [88.4, 36363.0], [88.5, 36376.0], [88.6, 36391.0], [88.7, 36401.0], [88.8, 36415.0], [88.9, 36431.0], [89.0, 36454.0], [89.1, 36469.0], [89.2, 36485.0], [89.3, 36494.0], [89.4, 36502.0], [89.5, 36519.0], [89.6, 36544.0], [89.7, 36554.0], [89.8, 36561.0], [89.9, 36577.0], [90.0, 36599.0], [90.1, 36630.0], [90.2, 36635.0], [90.3, 36649.0], [90.4, 36654.0], [90.5, 36664.0], [90.6, 36668.0], [90.7, 36690.0], [90.8, 36706.0], [90.9, 36719.0], [91.0, 36725.0], [91.1, 36755.0], [91.2, 36768.0], [91.3, 36778.0], [91.4, 36795.0], [91.5, 36812.0], [91.6, 36835.0], [91.7, 36856.0], [91.8, 36865.0], [91.9, 36878.0], [92.0, 36886.0], [92.1, 36896.0], [92.2, 36904.0], [92.3, 36910.0], [92.4, 36914.0], [92.5, 36925.0], [92.6, 36969.0], [92.7, 36978.0], [92.8, 37000.0], [92.9, 37010.0], [93.0, 37040.0], [93.1, 37050.0], [93.2, 37090.0], [93.3, 37100.0], [93.4, 37117.0], [93.5, 37146.0], [93.6, 37169.0], [93.7, 37228.0], [93.8, 37245.0], [93.9, 37251.0], [94.0, 37267.0], [94.1, 37286.0], [94.2, 37311.0], [94.3, 37344.0], [94.4, 37361.0], [94.5, 37377.0], [94.6, 37439.0], [94.7, 37466.0], [94.8, 37482.0], [94.9, 37492.0], [95.0, 37508.0], [95.1, 37535.0], [95.2, 37544.0], [95.3, 37556.0], [95.4, 37560.0], [95.5, 37585.0], [95.6, 37599.0], [95.7, 37611.0], [95.8, 37625.0], [95.9, 37635.0], [96.0, 37647.0], [96.1, 37669.0], [96.2, 37688.0], [96.3, 37711.0], [96.4, 37726.0], [96.5, 37743.0], [96.6, 37781.0], [96.7, 37791.0], [96.8, 37806.0], [96.9, 37881.0], [97.0, 37994.0], [97.1, 38050.0], [97.2, 38179.0], [97.3, 38259.0], [97.4, 38289.0], [97.5, 38315.0], [97.6, 38338.0], [97.7, 38354.0], [97.8, 38431.0], [97.9, 38470.0], [98.0, 38486.0], [98.1, 38527.0], [98.2, 38578.0], [98.3, 38689.0], [98.4, 38774.0], [98.5, 38790.0], [98.6, 38858.0], [98.7, 39108.0], [98.8, 39285.0], [98.9, 39912.0], [99.0, 40146.0], [99.1, 40424.0], [99.2, 40671.0], [99.3, 41671.0], [99.4, 42348.0], [99.5, 44521.0], [99.6, 44557.0], [99.7, 44574.0], [99.8, 44608.0], [99.9, 44870.0], [100.0, 47151.0]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 141.0, "series": [{"data": [[33300.0, 26.0], [32900.0, 23.0], [33700.0, 21.0], [34500.0, 33.0], [34100.0, 24.0], [36500.0, 30.0], [36100.0, 75.0], [34900.0, 18.0], [35700.0, 44.0], [35300.0, 20.0], [37700.0, 22.0], [37300.0, 18.0], [36900.0, 29.0], [38900.0, 1.0], [38100.0, 4.0], [38500.0, 8.0], [40500.0, 2.0], [39300.0, 2.0], [40100.0, 2.0], [41700.0, 2.0], [44500.0, 13.0], [700.0, 4.0], [800.0, 8.0], [900.0, 3.0], [1000.0, 8.0], [1100.0, 6.0], [2800.0, 1.0], [2900.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [4300.0, 1.0], [4600.0, 1.0], [4700.0, 2.0], [5000.0, 2.0], [5100.0, 1.0], [5200.0, 4.0], [5800.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [7000.0, 2.0], [7300.0, 2.0], [7400.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8000.0, 1.0], [8200.0, 1.0], [9100.0, 3.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [9600.0, 9.0], [9700.0, 3.0], [9900.0, 1.0], [10000.0, 1.0], [10200.0, 1.0], [10500.0, 2.0], [10700.0, 2.0], [10900.0, 2.0], [10800.0, 2.0], [11100.0, 2.0], [11200.0, 1.0], [11300.0, 4.0], [11600.0, 1.0], [11800.0, 1.0], [11900.0, 4.0], [12000.0, 1.0], [12100.0, 2.0], [12200.0, 2.0], [12300.0, 2.0], [12400.0, 2.0], [12500.0, 1.0], [12600.0, 2.0], [13000.0, 4.0], [12900.0, 1.0], [13100.0, 1.0], [13200.0, 3.0], [13300.0, 2.0], [13600.0, 1.0], [13800.0, 1.0], [13900.0, 4.0], [14000.0, 5.0], [14100.0, 12.0], [14200.0, 2.0], [14300.0, 1.0], [14400.0, 3.0], [14500.0, 9.0], [14600.0, 3.0], [14700.0, 1.0], [14800.0, 1.0], [14900.0, 5.0], [15000.0, 8.0], [15100.0, 1.0], [15200.0, 5.0], [15300.0, 1.0], [15400.0, 4.0], [15500.0, 4.0], [15800.0, 1.0], [16100.0, 9.0], [15900.0, 10.0], [16000.0, 4.0], [16300.0, 10.0], [16200.0, 12.0], [16600.0, 10.0], [17400.0, 5.0], [17200.0, 5.0], [17000.0, 9.0], [16800.0, 6.0], [16400.0, 7.0], [17600.0, 4.0], [17800.0, 9.0], [18000.0, 7.0], [18400.0, 6.0], [18200.0, 6.0], [18600.0, 14.0], [18800.0, 10.0], [19000.0, 6.0], [19400.0, 5.0], [19200.0, 11.0], [20200.0, 10.0], [19600.0, 7.0], [19800.0, 14.0], [20000.0, 13.0], [20400.0, 6.0], [20800.0, 20.0], [21400.0, 5.0], [21200.0, 5.0], [21000.0, 5.0], [20600.0, 4.0], [21800.0, 8.0], [22400.0, 4.0], [22200.0, 5.0], [22000.0, 5.0], [21600.0, 9.0], [23400.0, 4.0], [23200.0, 5.0], [23000.0, 5.0], [22800.0, 2.0], [22600.0, 4.0], [23600.0, 6.0], [23800.0, 10.0], [24000.0, 8.0], [24200.0, 10.0], [24400.0, 33.0], [24800.0, 54.0], [24600.0, 70.0], [25200.0, 60.0], [25000.0, 40.0], [25400.0, 9.0], [25800.0, 13.0], [25600.0, 96.0], [26000.0, 13.0], [26400.0, 10.0], [26600.0, 6.0], [26200.0, 10.0], [27600.0, 11.0], [26800.0, 9.0], [27000.0, 16.0], [27400.0, 8.0], [27200.0, 16.0], [28200.0, 9.0], [28000.0, 5.0], [28400.0, 7.0], [28600.0, 7.0], [27800.0, 3.0], [29200.0, 48.0], [28800.0, 10.0], [29600.0, 1.0], [29000.0, 22.0], [29400.0, 20.0], [30000.0, 22.0], [29800.0, 6.0], [30400.0, 8.0], [30200.0, 11.0], [30600.0, 22.0], [31400.0, 8.0], [31000.0, 18.0], [31200.0, 13.0], [30800.0, 10.0], [31600.0, 104.0], [32200.0, 50.0], [32000.0, 61.0], [31800.0, 73.0], [32400.0, 39.0], [32600.0, 35.0], [32800.0, 21.0], [33200.0, 20.0], [33600.0, 18.0], [34000.0, 23.0], [34400.0, 20.0], [34800.0, 23.0], [36800.0, 33.0], [36400.0, 31.0], [36000.0, 65.0], [35600.0, 21.0], [35200.0, 23.0], [37600.0, 29.0], [37200.0, 22.0], [38000.0, 5.0], [38400.0, 12.0], [38800.0, 5.0], [39200.0, 3.0], [40800.0, 1.0], [40400.0, 1.0], [40000.0, 1.0], [41600.0, 2.0], [43600.0, 1.0], [44400.0, 1.0], [44800.0, 4.0], [46000.0, 1.0], [33500.0, 19.0], [33100.0, 5.0], [33900.0, 30.0], [34300.0, 26.0], [34700.0, 20.0], [36700.0, 30.0], [35500.0, 22.0], [35900.0, 71.0], [36300.0, 38.0], [35100.0, 15.0], [37500.0, 31.0], [37100.0, 17.0], [38300.0, 13.0], [38700.0, 8.0], [37900.0, 5.0], [39100.0, 2.0], [39500.0, 1.0], [39900.0, 3.0], [40300.0, 2.0], [40700.0, 2.0], [42300.0, 1.0], [44700.0, 2.0], [43900.0, 1.0], [44300.0, 1.0], [47100.0, 1.0], [16500.0, 9.0], [16700.0, 11.0], [17300.0, 18.0], [17100.0, 2.0], [16900.0, 4.0], [17900.0, 7.0], [17700.0, 11.0], [18300.0, 10.0], [17500.0, 8.0], [19300.0, 5.0], [18500.0, 5.0], [18700.0, 8.0], [19100.0, 9.0], [18900.0, 3.0], [19500.0, 9.0], [19700.0, 19.0], [19900.0, 17.0], [20300.0, 3.0], [20100.0, 7.0], [20700.0, 11.0], [20900.0, 8.0], [21500.0, 6.0], [21300.0, 6.0], [21100.0, 3.0], [20500.0, 7.0], [22500.0, 3.0], [22300.0, 2.0], [22100.0, 3.0], [21900.0, 4.0], [21700.0, 5.0], [23500.0, 8.0], [23300.0, 3.0], [23100.0, 6.0], [22900.0, 6.0], [22700.0, 4.0], [23700.0, 5.0], [24100.0, 3.0], [24300.0, 4.0], [24500.0, 141.0], [23900.0, 4.0], [24900.0, 36.0], [24700.0, 31.0], [25300.0, 21.0], [25100.0, 64.0], [25500.0, 76.0], [25700.0, 51.0], [26100.0, 12.0], [26300.0, 13.0], [26500.0, 10.0], [25900.0, 7.0], [26900.0, 17.0], [27500.0, 18.0], [27300.0, 12.0], [27100.0, 11.0], [26700.0, 1.0], [28300.0, 12.0], [27700.0, 4.0], [27900.0, 14.0], [28100.0, 7.0], [28500.0, 11.0], [29300.0, 16.0], [29100.0, 7.0], [29500.0, 4.0], [28900.0, 20.0], [28700.0, 25.0], [29700.0, 3.0], [30300.0, 3.0], [29900.0, 5.0], [30100.0, 6.0], [30700.0, 14.0], [30500.0, 5.0], [30900.0, 10.0], [31300.0, 12.0], [31100.0, 27.0], [31500.0, 63.0], [31700.0, 83.0], [32100.0, 67.0], [31900.0, 34.0], [32300.0, 46.0], [32500.0, 26.0], [32700.0, 32.0], [33000.0, 17.0], [34200.0, 32.0], [33400.0, 15.0], [33800.0, 31.0], [34600.0, 28.0], [36600.0, 34.0], [36200.0, 60.0], [35400.0, 19.0], [35800.0, 65.0], [35000.0, 16.0], [37400.0, 17.0], [37000.0, 22.0], [37800.0, 8.0], [38200.0, 12.0], [38600.0, 6.0], [39400.0, 1.0], [40600.0, 2.0], [39000.0, 2.0], [40200.0, 1.0], [41000.0, 1.0], [44600.0, 2.0]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 47100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4494.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 29.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4494.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 210.20689655172413, "minX": 1.6201248E12, "maxY": 1987.3180439727078, "series": [{"data": [[1.62012492E12, 928.7171336206911], [1.6201248E12, 210.20689655172413], [1.62012486E12, 1987.3180439727078]], "isOverall": false, "label": "accelerometer data ingest", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62012492E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 749.0, "minX": 2.0, "maxY": 40039.0, "series": [{"data": [[2.0, 16073.0], [4.0, 16121.0], [6.0, 16170.0], [7.0, 16120.0], [8.0, 16118.0], [9.0, 16237.0], [11.0, 16214.5], [12.0, 16246.0], [15.0, 16275.666666666666], [18.0, 16294.0], [22.0, 16372.0], [24.0, 16425.5], [26.0, 16549.0], [28.0, 16459.0], [29.0, 16488.0], [30.0, 16548.0], [32.0, 16537.5], [34.0, 16640.0], [37.0, 16680.0], [36.0, 16647.5], [39.0, 16711.0], [41.0, 16821.0], [42.0, 16715.0], [44.0, 16773.0], [47.0, 16835.0], [46.0, 16852.0], [49.0, 16882.5], [51.0, 16911.0], [50.0, 16900.0], [55.0, 16965.0], [54.0, 16977.666666666668], [57.0, 17019.0], [58.0, 17013.0], [60.0, 17082.5], [62.0, 17078.0], [67.0, 17173.333333333332], [66.0, 17269.0], [64.0, 17214.0], [69.0, 17313.5], [75.0, 17327.0], [74.0, 17401.0], [72.0, 17284.333333333332], [79.0, 17395.0], [77.0, 17300.0], [76.0, 17326.0], [81.0, 17462.0], [80.0, 17339.0], [85.0, 17524.0], [84.0, 17466.333333333332], [91.0, 17556.5], [89.0, 17536.5], [94.0, 17705.0], [99.0, 17793.666666666668], [96.0, 17765.0], [102.0, 17866.0], [101.0, 17864.5], [107.0, 17933.0], [106.0, 17961.0], [104.0, 17900.0], [110.0, 17991.0], [109.0, 18005.0], [115.0, 18058.5], [113.0, 18019.0], [112.0, 18128.0], [119.0, 18221.333333333332], [116.0, 18082.0], [123.0, 18311.0], [122.0, 18278.666666666668], [127.0, 18349.5], [126.0, 18390.0], [124.0, 18337.0], [134.0, 18542.5], [132.0, 18514.5], [131.0, 18412.0], [129.0, 18407.0], [143.0, 18758.0], [141.0, 18717.0], [140.0, 18701.0], [139.0, 18680.666666666668], [136.0, 18639.0], [150.0, 18843.0], [149.0, 18849.5], [147.0, 18837.0], [145.0, 18809.0], [144.0, 18813.0], [154.0, 9844.0], [155.0, 749.0], [156.0, 756.0], [158.0, 19044.5], [153.0, 18947.0], [166.0, 10019.0], [165.0, 19230.0], [163.0, 19116.75], [161.0, 19203.0], [172.0, 10141.0], [175.0, 19416.5], [173.0, 19342.0], [171.0, 19304.0], [170.0, 19262.0], [169.0, 19214.0], [178.0, 13359.333333333334], [182.0, 19596.0], [181.0, 19559.0], [180.0, 19539.0], [179.0, 19702.0], [176.0, 19472.0], [185.0, 10228.0], [191.0, 19779.0], [190.0, 19688.0], [188.0, 19711.666666666668], [184.0, 19621.5], [192.0, 10284.0], [193.0, 7185.0], [194.0, 4666.4], [198.0, 19788.0], [196.0, 19775.5], [206.0, 20003.0], [205.0, 20013.0], [204.0, 19906.0], [203.0, 19886.0], [202.0, 19891.0], [200.0, 19857.5], [215.0, 20069.0], [214.0, 20085.0], [212.0, 20076.5], [210.0, 20079.0], [209.0, 20053.333333333332], [222.0, 12498.8], [223.0, 20206.0], [219.0, 20123.0], [218.0, 20140.0], [217.0, 20175.0], [229.0, 1094.0], [230.0, 20307.0], [228.0, 20265.0], [226.0, 20240.0], [225.0, 20245.0], [224.0, 20242.0], [239.0, 20484.0], [238.0, 20487.0], [237.0, 20482.0], [236.0, 20442.0], [235.0, 20450.0], [234.0, 20367.0], [233.0, 20310.0], [232.0, 20252.0], [245.0, 10829.75], [247.0, 20663.0], [246.0, 20565.0], [243.0, 20537.0], [242.0, 20515.0], [241.0, 20495.0], [240.0, 20574.0], [249.0, 5982.25], [250.0, 10846.5], [252.0, 4387.0], [253.0, 20703.0], [251.0, 20654.0], [248.0, 20592.0], [270.0, 20906.0], [271.0, 21029.0], [268.0, 20859.0], [259.0, 20782.0], [257.0, 20766.0], [256.0, 20742.333333333332], [267.0, 20861.5], [265.0, 20854.0], [264.0, 20806.0], [263.0, 20804.0], [262.0, 20724.0], [261.0, 20778.0], [275.0, 21038.0], [285.0, 21244.0], [287.0, 21294.5], [284.0, 21267.0], [283.0, 21297.5], [281.0, 21202.5], [279.0, 21195.5], [277.0, 21054.5], [274.0, 21041.0], [273.0, 20991.0], [272.0, 20995.0], [302.0, 21607.0], [303.0, 21588.0], [300.0, 21580.0], [291.0, 21352.0], [290.0, 21345.0], [289.0, 21307.0], [288.0, 21341.0], [299.0, 21584.0], [298.0, 21518.0], [297.0, 21558.0], [296.0, 21531.0], [295.0, 21410.0], [294.0, 21476.0], [293.0, 21455.0], [292.0, 21417.0], [318.0, 21866.0], [319.0, 21899.0], [317.0, 21844.0], [316.0, 21782.0], [315.0, 21833.0], [314.0, 21747.0], [312.0, 21712.5], [310.0, 21666.0], [307.0, 21669.5], [305.0, 21615.5], [309.0, 21663.0], [308.0, 21667.0], [334.0, 22169.5], [332.0, 22073.0], [330.0, 22067.0], [329.0, 22113.0], [328.0, 22001.0], [326.0, 22024.5], [324.0, 21921.5], [322.0, 21865.5], [320.0, 21859.0], [350.0, 22697.0], [351.0, 22773.0], [349.0, 22670.0], [348.0, 22654.0], [347.0, 22617.0], [346.0, 22571.0], [344.0, 22511.0], [343.0, 22464.0], [337.0, 22229.0], [336.0, 22252.5], [339.0, 22263.0], [338.0, 22302.0], [342.0, 22434.0], [340.0, 22304.0], [354.0, 22795.0], [366.0, 23042.0], [367.0, 23059.0], [364.0, 23000.5], [362.0, 22980.5], [360.0, 22902.0], [359.0, 22927.0], [357.0, 22910.0], [356.0, 22871.5], [353.0, 22773.0], [352.0, 22767.0], [381.0, 23396.0], [382.0, 23451.0], [380.0, 23394.0], [371.0, 23160.0], [370.0, 23158.0], [369.0, 23122.0], [368.0, 23107.0], [379.0, 23353.0], [378.0, 23237.0], [377.0, 23279.0], [376.0, 23231.0], [375.0, 23216.0], [374.0, 23196.0], [373.0, 23211.5], [398.0, 23723.0], [399.0, 23819.0], [397.0, 23711.0], [386.0, 23508.0], [385.0, 23487.0], [384.0, 23474.5], [395.0, 23657.0], [394.0, 23626.0], [392.0, 23554.0], [391.0, 23555.0], [390.0, 23535.0], [389.0, 23552.0], [388.0, 23543.0], [412.0, 24024.0], [414.0, 24084.0], [415.0, 24160.0], [413.0, 24099.0], [410.0, 24025.5], [408.0, 24001.0], [407.0, 23986.0], [400.0, 23818.0], [403.0, 23877.0], [402.0, 23848.5], [406.0, 23942.0], [405.0, 23913.5], [430.0, 24509.0], [431.0, 24520.0], [429.0, 24477.0], [419.0, 24221.0], [417.0, 24212.0], [416.0, 24154.0], [427.0, 24440.5], [425.0, 24408.0], [424.0, 24366.0], [423.0, 24345.0], [422.0, 24344.0], [421.0, 24241.0], [420.0, 24249.0], [446.0, 24817.0], [447.0, 24863.0], [445.0, 24793.0], [444.0, 24809.0], [443.0, 24768.0], [442.0, 24757.0], [441.0, 24755.0], [440.0, 24724.5], [438.0, 24698.0], [433.0, 24552.0], [432.0, 24531.0], [435.0, 24644.0], [434.0, 24558.0], [437.0, 24637.0], [436.0, 24684.0], [461.0, 25146.0], [463.0, 25171.0], [460.0, 25112.0], [459.0, 25106.0], [458.0, 25055.5], [456.0, 25035.666666666668], [453.0, 25041.0], [452.0, 24994.0], [450.0, 24901.0], [449.0, 24894.0], [478.0, 25618.0], [479.0, 25616.0], [477.0, 25610.0], [476.0, 25566.0], [475.0, 25555.0], [474.0, 25489.0], [473.0, 25466.0], [472.0, 25371.0], [470.0, 25317.0], [465.0, 25208.0], [464.0, 25205.0], [467.0, 25238.0], [466.0, 25228.0], [469.0, 25286.0], [468.0, 25276.0], [494.0, 25833.0], [495.0, 25839.0], [493.0, 25767.0], [492.0, 25779.0], [491.0, 25768.0], [490.0, 25745.0], [489.0, 25722.0], [488.0, 25723.0], [486.0, 25762.0], [481.0, 25652.0], [480.0, 25660.0], [483.0, 25666.0], [482.0, 25670.0], [485.0, 25693.0], [484.0, 25668.0], [509.0, 26115.0], [511.0, 30178.0], [508.0, 26085.0], [499.0, 25921.0], [498.0, 25892.5], [496.0, 25872.0], [507.0, 26021.5], [505.0, 26032.0], [504.0, 26085.0], [503.0, 25976.0], [502.0, 25921.0], [501.0, 25942.0], [500.0, 25921.0], [514.0, 26125.0], [536.0, 26325.0], [542.0, 26502.0], [512.0, 26123.5], [516.0, 26215.5], [518.0, 26094.0], [526.0, 26670.666666666668], [522.0, 26184.0], [520.0, 26256.0], [532.0, 26236.0], [570.0, 26903.0], [560.0, 26911.5], [564.0, 26902.0], [572.0, 26895.0], [568.0, 26892.0], [550.0, 26455.0], [546.0, 26450.0], [544.0, 26301.0], [558.0, 26876.5], [556.0, 26898.0], [554.0, 26582.0], [566.0, 26902.0], [578.0, 27009.0], [600.0, 27176.0], [602.0, 27246.0], [576.0, 27076.5], [580.0, 27159.5], [590.0, 27090.0], [588.0, 27047.0], [586.0, 27206.0], [584.0, 27007.0], [598.0, 27227.0], [634.0, 27667.5], [628.0, 27411.0], [624.0, 27589.0], [636.0, 27555.0], [632.0, 27601.0], [612.0, 27275.0], [622.0, 27327.0], [620.0, 27550.0], [618.0, 28109.0], [616.0, 27314.0], [630.0, 27573.0], [668.0, 28367.0], [656.0, 28183.0], [658.0, 28114.0], [670.0, 28377.0], [666.0, 28400.0], [664.0, 28079.0], [642.0, 27608.0], [640.0, 27684.0], [646.0, 27595.0], [654.0, 27968.0], [650.0, 27948.0], [662.0, 28418.0], [698.0, 28717.0], [690.0, 28715.0], [702.0, 28711.5], [688.0, 28751.0], [700.0, 28813.5], [678.0, 28575.0], [676.0, 28700.666666666668], [672.0, 28756.0], [686.0, 28765.0], [684.0, 28641.0], [682.0, 28681.0], [680.0, 28613.0], [694.0, 28719.5], [692.0, 28727.5], [728.0, 28961.0], [720.0, 28908.0], [722.0, 29015.0], [730.0, 28950.0], [718.0, 28973.0], [706.0, 28706.0], [708.0, 28902.0], [710.0, 28912.0], [714.0, 28907.5], [712.0, 28876.0], [726.0, 28965.0], [764.0, 29184.0], [766.0, 29202.0], [754.0, 29022.0], [756.0, 29233.0], [760.0, 29236.0], [740.0, 28962.0], [738.0, 29024.0], [736.0, 29052.0], [750.0, 29043.0], [748.0, 29050.0], [746.0, 29057.0], [758.0, 29224.0], [768.0, 29267.0], [778.0, 29287.0], [776.0, 29275.0], [782.0, 29265.0], [770.0, 29204.0], [774.0, 29246.0], [780.0, 29245.0], [798.0, 29222.0], [784.0, 29260.0], [788.0, 29237.0], [786.0, 29270.0], [796.0, 29233.0], [794.0, 29240.0], [790.0, 29263.0], [824.0, 29469.0], [828.0, 29385.0], [816.0, 29341.0], [818.0, 29465.0], [830.0, 30067.0], [826.0, 29390.0], [800.0, 29319.0], [806.0, 29307.0], [814.0, 29482.0], [812.0, 29307.0], [810.0, 29440.0], [820.0, 29412.0], [858.0, 30850.0], [862.0, 30071.0], [848.0, 30013.0], [850.0, 30250.0], [860.0, 30055.0], [838.0, 29420.0], [836.0, 29429.0], [834.0, 29714.0], [832.0, 29410.0], [846.0, 30371.0], [844.0, 30031.0], [842.0, 30013.0], [840.0, 30049.0], [854.0, 32054.0], [892.0, 31138.0], [880.0, 31067.0], [884.0, 31170.0], [894.0, 31130.0], [890.0, 31143.0], [888.0, 31109.0], [864.0, 30468.0], [868.0, 30401.0], [878.0, 30835.0], [876.0, 30641.5], [874.0, 30649.0], [872.0, 30434.0], [886.0, 31075.0], [902.0, 31348.25], [920.0, 31823.0], [908.0, 31408.0], [906.0, 31222.0], [904.0, 31129.0], [896.0, 31172.0], [900.0, 31151.0], [910.0, 31904.0], [926.0, 31905.0], [912.0, 31566.0], [914.0, 31388.0], [916.0, 31714.0], [924.0, 31867.0], [922.0, 31823.0], [918.0, 31833.0], [958.0, 32004.0], [950.0, 4690.5], [948.0, 32027.0], [944.0, 32102.0], [956.0, 32001.0], [954.0, 32016.0], [952.0, 32051.0], [934.0, 31956.0], [930.0, 32007.0], [928.0, 31948.5], [942.0, 32060.333333333332], [938.0, 31979.0], [936.0, 31995.0], [988.0, 31926.0], [990.0, 31788.0], [980.0, 31846.0], [976.0, 31842.0], [978.0, 31861.0], [986.0, 31924.0], [966.0, 31970.0], [964.0, 31893.0], [962.0, 31901.0], [960.0, 31985.0], [974.0, 31901.0], [970.0, 31861.5], [968.0, 31916.5], [982.0, 31822.0], [994.0, 31833.0], [1016.0, 31797.0], [1020.0, 31825.0], [1002.0, 31825.0], [1006.0, 31821.0], [992.0, 31907.0], [996.0, 31863.0], [998.0, 32328.0], [1004.0, 32309.0], [1008.0, 31812.0], [1010.0, 31772.0], [1012.0, 31805.0], [1018.0, 31863.0], [1014.0, 31759.0], [1076.0, 31673.0], [1084.0, 31787.0], [1056.0, 31790.0], [1060.0, 31716.0], [1072.0, 31681.0], [1036.0, 31741.0], [1032.0, 31851.0], [1028.0, 31732.0], [1024.0, 31743.666666666668], [1052.0, 31829.0], [1048.0, 31813.0], [1044.0, 31723.0], [1040.0, 31727.0], [1068.0, 31691.0], [1064.0, 31762.0], [1144.0, 31644.0], [1120.0, 31545.0], [1128.0, 31824.0], [1148.0, 31749.0], [1140.0, 31789.0], [1136.0, 31641.0], [1088.0, 31709.5], [1092.0, 31694.0], [1096.0, 31653.0], [1100.0, 31650.0], [1112.0, 31623.0], [1108.0, 31634.0], [1104.0, 31608.5], [1132.0, 31629.0], [1208.0, 31580.0], [1212.0, 31609.0], [1188.0, 31595.0], [1192.0, 31556.0], [1196.0, 31587.0], [1204.0, 31595.0], [1200.0, 31550.0], [1152.0, 31741.0], [1156.0, 31693.0], [1160.0, 31673.0], [1164.0, 31676.0], [1176.0, 31625.0], [1172.0, 31658.0], [1168.0, 31753.0], [1220.0, 31592.0], [1224.0, 31619.0], [1216.0, 31597.0], [1244.0, 31581.0], [1240.0, 31586.0], [1236.0, 31649.0], [1232.0, 31695.0], [1264.0, 32815.0], [1268.0, 32275.0], [1248.0, 31674.0], [1252.0, 31970.0], [1256.0, 32322.0], [1260.0, 32335.0], [1276.0, 33122.0], [1272.0, 32631.0], [1284.0, 32919.0], [1292.0, 33103.0], [1340.0, 34521.5], [1300.0, 19734.5], [1296.0, 33299.0], [1304.0, 33241.0], [1328.0, 34393.0], [1288.0, 33090.0], [1280.0, 32900.0], [1332.0, 34454.0], [1324.0, 34371.0], [1320.0, 34175.0], [1316.0, 33812.0], [1312.0, 33490.0], [1336.0, 34436.0], [1400.0, 36361.0], [1396.0, 36144.0], [1404.0, 36471.0], [1376.0, 35233.0], [1380.0, 35738.0], [1384.0, 35656.0], [1392.0, 36027.0], [1344.0, 34537.0], [1348.0, 35412.0], [1352.0, 34879.0], [1372.0, 35226.0], [1368.0, 35261.0], [1364.0, 35069.0], [1360.0, 35026.0], [1464.0, 36719.0], [1460.0, 36652.0], [1468.0, 36839.0], [1440.0, 36788.0], [1444.0, 36926.0], [1448.0, 36730.0], [1452.0, 36706.0], [1420.0, 36871.5], [1416.0, 36909.5], [1412.0, 37013.0], [1408.0, 36477.0], [1436.0, 36978.0], [1432.0, 36808.0], [1428.0, 36827.0], [1424.0, 36884.0], [1484.0, 36706.0], [1524.0, 36430.5], [1472.0, 16927.666666666664], [1500.0, 36574.0], [1496.0, 36606.0], [1492.0, 36458.0], [1520.0, 36531.5], [1480.0, 36778.0], [1476.0, 36643.0], [1528.0, 36469.0], [1512.0, 36487.0], [1508.0, 36370.0], [1504.0, 36769.0], [1516.0, 36343.0], [1532.0, 36413.0], [1536.0, 21870.5], [1548.0, 36276.0], [1596.0, 36129.0], [1540.0, 36320.0], [1564.0, 36155.5], [1560.0, 36180.0], [1556.0, 36243.0], [1552.0, 36258.0], [1568.0, 36327.0], [1572.0, 36131.0], [1576.0, 36090.0], [1580.0, 36280.0], [1592.0, 36151.0], [1588.0, 36218.0], [1584.0, 36115.0], [1652.0, 36132.0], [1640.0, 36151.0], [1636.0, 36238.0], [1632.0, 36274.0], [1644.0, 36148.0], [1600.0, 36098.0], [1604.0, 36004.0], [1608.0, 35952.0], [1612.0, 35927.0], [1628.0, 36092.0], [1624.0, 36007.0], [1620.0, 35906.0], [1616.0, 35893.0], [1656.0, 36118.0], [1660.0, 36124.0], [1672.0, 36033.0], [1724.0, 35775.0], [1704.0, 35856.0], [1668.0, 35990.0], [1676.0, 35975.0], [1692.0, 35947.0], [1688.0, 35912.0], [1684.0, 35980.0], [1680.0, 35943.0], [1712.0, 35881.0], [1696.0, 35939.0], [1700.0, 35909.0], [1708.0, 35879.0], [1720.0, 35801.0], [1716.0, 35814.0], [1784.0, 34973.0], [1788.0, 35016.0], [1760.0, 37113.0], [1764.0, 35261.0], [1768.0, 35034.0], [1772.0, 35156.0], [1780.0, 34817.0], [1776.0, 35072.0], [1740.0, 35558.0], [1736.0, 35633.0], [1732.0, 35742.0], [1728.0, 35712.0], [1756.0, 35296.0], [1748.0, 35386.0], [1744.0, 35407.0], [1848.0, 34281.0], [1824.0, 34699.0], [1828.0, 34637.0], [1832.0, 34555.0], [1836.0, 34494.0], [1844.0, 34376.0], [1840.0, 34457.0], [1804.0, 35279.0], [1800.0, 34809.0], [1796.0, 34824.0], [1792.0, 35266.0], [1820.0, 35193.0], [1816.0, 34758.0], [1812.0, 34703.0], [1808.0, 34782.5], [1860.0, 34262.5], [1896.0, 33803.0], [1904.0, 33712.0], [1856.0, 34338.0], [1864.0, 34185.0], [1868.0, 34243.0], [1884.0, 33899.0], [1880.0, 33971.0], [1876.0, 34013.0], [1872.0, 34097.0], [1908.0, 33766.0], [1912.0, 34100.0], [1888.0, 33927.0], [1892.0, 33864.0], [1916.0, 34192.0], [1924.0, 33555.0], [1932.0, 33642.0], [1920.0, 34200.0], [1928.0, 33646.0], [1948.0, 33415.0], [1944.0, 34129.0], [1940.0, 33483.0], [1936.0, 33636.0], [1960.0, 33347.0], [1956.0, 33332.0], [1952.0, 33381.0], [1988.0, 32916.0], [1996.0, 32895.0], [2000.0, 29339.299715331457], [1984.0, 32973.0], [1992.0, 32937.0], [1081.0, 31652.0], [1065.0, 11757.5], [1061.0, 31787.0], [1057.0, 31784.0], [1077.0, 31728.0], [1073.0, 31695.0], [1037.0, 31834.0], [1033.0, 31727.0], [1025.0, 31731.0], [1053.0, 31785.0], [1049.0, 31837.0], [1045.0, 31840.0], [1041.0, 31811.0], [1069.0, 31667.0], [1093.0, 11824.25], [1145.0, 31699.0], [1089.0, 31737.0], [1097.0, 31643.0], [1117.0, 31635.0], [1113.0, 31596.0], [1109.0, 31618.0], [1105.0, 31606.0], [1121.0, 31691.0], [1125.0, 31557.5], [1129.0, 31699.0], [1133.0, 31682.0], [1149.0, 31695.0], [1141.0, 31649.0], [1137.0, 31633.0], [1209.0, 31556.0], [1213.0, 31595.0], [1185.0, 31601.5], [1193.0, 31569.0], [1197.0, 31583.0], [1205.0, 31611.0], [1201.0, 31572.0], [1153.0, 31707.0], [1157.0, 31724.0], [1161.0, 31669.0], [1165.0, 31672.0], [1181.0, 31617.0], [1177.0, 31617.0], [1173.0, 31620.0], [1169.0, 31750.0], [1221.0, 18712.0], [1229.0, 31675.5], [1217.0, 31591.0], [1241.0, 31581.0], [1237.0, 31613.0], [1233.0, 31648.0], [1225.0, 31567.0], [1265.0, 32321.0], [1269.0, 32743.0], [1249.0, 18929.5], [1253.0, 31967.0], [1257.0, 32334.0], [1261.0, 32344.0], [1273.0, 32634.0], [1309.0, 33537.0], [1297.0, 33209.0], [1301.0, 33289.0], [1305.0, 33506.0], [1293.0, 32975.0], [1289.0, 32989.0], [1285.0, 33050.0], [1281.0, 32583.0], [1329.0, 34627.0], [1333.0, 34452.0], [1325.0, 20502.0], [1321.0, 34287.0], [1317.0, 33877.0], [1341.0, 34657.0], [1337.0, 34407.0], [1401.0, 36599.0], [1405.0, 36577.0], [1377.0, 35226.0], [1381.0, 35640.0], [1385.0, 35651.0], [1389.0, 36045.5], [1397.0, 36209.0], [1393.0, 35992.0], [1345.0, 34744.0], [1349.0, 34559.0], [1353.0, 34618.0], [1357.0, 34994.0], [1373.0, 35656.0], [1369.0, 35850.0], [1365.0, 35288.0], [1361.0, 35258.0], [1465.0, 36654.0], [1469.0, 36671.0], [1441.0, 36768.0], [1445.0, 36919.0], [1449.0, 36925.0], [1453.0, 36706.0], [1461.0, 36842.0], [1457.0, 36701.5], [1421.0, 36835.0], [1417.0, 37001.0], [1413.0, 36896.0], [1409.0, 36913.0], [1437.0, 36815.0], [1433.0, 36837.0], [1429.0, 36857.0], [1425.0, 37040.0], [1485.0, 36545.0], [1533.0, 36391.0], [1497.0, 36598.0], [1493.0, 36654.0], [1489.0, 36711.5], [1481.0, 36577.0], [1477.0, 37088.0], [1473.0, 36608.0], [1521.0, 36444.0], [1513.0, 21866.5], [1509.0, 36377.0], [1505.0, 39053.0], [1517.0, 36339.0], [1529.0, 36466.0], [1549.0, 7411.0], [1537.0, 36339.0], [1541.0, 36320.0], [1545.0, 36287.5], [1557.0, 36205.0], [1553.0, 36227.0], [1569.0, 36172.0], [1573.0, 36212.0], [1577.0, 36087.0], [1581.0, 36344.0], [1597.0, 36125.0], [1593.0, 36140.0], [1589.0, 36282.0], [1585.0, 36102.0], [1661.0, 36070.0], [1653.0, 17377.333333333336], [1641.0, 36692.0], [1637.0, 36162.0], [1633.0, 36240.0], [1645.0, 36174.0], [1649.0, 36208.0], [1601.0, 36051.0], [1605.0, 35986.0], [1609.0, 35941.0], [1613.0, 35942.0], [1629.0, 36334.0], [1621.0, 35898.0], [1617.0, 35881.0], [1657.0, 36143.0], [1669.0, 35975.0], [1673.0, 36008.0], [1665.0, 36084.5], [1677.0, 35967.0], [1693.0, 35897.0], [1689.0, 35935.0], [1685.0, 35908.0], [1681.0, 36012.0], [1713.0, 35872.0], [1697.0, 36043.0], [1701.0, 35852.0], [1705.0, 35888.0], [1709.0, 35890.0], [1725.0, 35736.0], [1717.0, 35818.0], [1789.0, 34826.0], [1761.0, 35473.0], [1765.0, 35034.0], [1773.0, 35014.0], [1785.0, 35398.0], [1781.0, 34865.0], [1777.0, 35085.0], [1741.0, 35500.0], [1737.0, 35609.0], [1733.0, 35707.0], [1729.0, 35703.0], [1757.0, 35474.0], [1749.0, 35322.0], [1745.0, 35429.0], [1853.0, 34298.5], [1825.0, 34685.0], [1829.0, 34594.0], [1833.0, 34652.0], [1837.0, 34581.0], [1849.0, 34386.0], [1845.0, 34368.0], [1841.0, 34541.0], [1805.0, 34808.0], [1801.0, 34855.0], [1797.0, 34886.0], [1793.0, 34749.0], [1821.0, 34619.0], [1817.0, 34773.0], [1813.0, 34697.0], [1809.0, 34727.0], [1865.0, 34203.0], [1897.0, 33867.0], [1901.0, 33882.5], [1905.0, 33935.0], [1857.0, 34281.0], [1861.0, 34304.0], [1869.0, 34085.0], [1885.0, 33912.0], [1881.0, 33942.0], [1877.0, 33990.0], [1873.0, 34023.0], [1909.0, 33613.0], [1913.0, 33690.0], [1889.0, 33918.0], [1893.0, 33883.0], [1917.0, 33828.0], [1925.0, 33711.0], [1961.0, 21351.0], [1981.0, 33340.25], [1921.0, 33563.0], [1929.0, 33678.0], [1933.0, 33587.0], [1949.0, 33408.0], [1945.0, 33501.0], [1941.0, 33494.0], [1937.0, 34163.0], [1957.0, 33375.0], [1953.0, 33354.0], [1993.0, 32953.0], [1989.0, 21255.5], [1985.0, 33049.0], [1997.0, 32856.0], [539.0, 26330.5], [543.0, 26304.0], [529.0, 26231.0], [541.0, 26492.0], [537.0, 26314.0], [527.0, 26296.0], [513.0, 26108.0], [517.0, 26096.0], [519.0, 26194.0], [523.0, 26244.0], [521.0, 26276.0], [535.0, 26395.0], [533.0, 26349.0], [531.0, 26295.0], [569.0, 26900.0], [573.0, 27076.0], [575.0, 27142.0], [561.0, 26870.0], [563.0, 26852.5], [571.0, 27083.0], [551.0, 26499.0], [549.0, 26476.0], [547.0, 26616.0], [545.0, 26631.0], [555.0, 26903.0], [553.0, 26633.5], [565.0, 26874.0], [601.0, 15044.0], [605.0, 27224.5], [607.0, 27281.0], [593.0, 27202.0], [603.0, 27301.0], [591.0, 27243.0], [577.0, 26982.0], [583.0, 27032.0], [581.0, 27112.0], [589.0, 27088.0], [587.0, 27048.0], [585.0, 27183.0], [599.0, 27176.0], [597.0, 27214.0], [595.0, 27210.0], [639.0, 27600.0], [629.0, 15279.5], [627.0, 27469.5], [625.0, 27342.0], [637.0, 27562.0], [635.0, 27553.0], [615.0, 27250.0], [613.0, 27317.0], [609.0, 27220.0], [623.0, 27376.0], [621.0, 27295.5], [631.0, 27564.0], [669.0, 28366.0], [671.0, 28599.0], [657.0, 27963.0], [661.0, 28132.5], [659.0, 27960.0], [667.0, 28396.0], [665.0, 27959.0], [655.0, 27938.0], [645.0, 27558.5], [643.0, 27843.0], [647.0, 27833.0], [653.0, 27836.5], [651.0, 27974.0], [649.0, 27908.5], [663.0, 27965.0], [677.0, 28729.0], [703.0, 28918.0], [689.0, 28703.0], [697.0, 28728.0], [673.0, 28590.0], [687.0, 28749.0], [685.0, 28659.0], [683.0, 28748.0], [695.0, 28739.0], [731.0, 28999.0], [733.0, 29017.5], [735.0, 28981.0], [721.0, 29021.0], [729.0, 28996.0], [705.0, 28828.5], [707.0, 28792.0], [709.0, 28839.0], [711.0, 28831.0], [717.0, 28879.666666666668], [727.0, 28962.0], [725.0, 29004.0], [723.0, 29020.0], [763.0, 29227.0], [761.0, 16503.5], [767.0, 29207.0], [753.0, 29025.0], [755.0, 29182.0], [757.0, 29156.0], [765.0, 29259.0], [743.0, 29194.333333333332], [739.0, 29041.0], [751.0, 29150.0], [747.0, 29052.0], [745.0, 29048.5], [759.0, 29197.0], [771.0, 29248.0], [793.0, 29254.666666666668], [797.0, 29388.0], [779.0, 16479.5], [777.0, 29237.0], [769.0, 29297.0], [773.0, 29265.5], [775.0, 29298.0], [785.0, 29260.0], [795.0, 29237.0], [789.0, 29228.0], [827.0, 29455.0], [831.0, 30090.0], [817.0, 29316.0], [829.0, 30069.0], [825.0, 29397.0], [815.0, 29495.0], [801.0, 29293.0], [805.0, 29256.0], [803.0, 29301.5], [807.0, 29454.0], [813.0, 29296.0], [811.0, 29336.0], [809.0, 29334.5], [823.0, 29569.333333333332], [861.0, 30321.0], [863.0, 30274.0], [849.0, 30008.0], [851.0, 30074.0], [859.0, 30414.0], [857.0, 29988.0], [839.0, 29484.0], [835.0, 30087.0], [847.0, 30013.0], [845.0, 29991.0], [843.0, 30044.0], [855.0, 30237.0], [893.0, 31823.0], [895.0, 31171.0], [883.0, 30802.5], [881.0, 31115.0], [885.0, 30809.0], [891.0, 31145.0], [889.0, 31157.0], [879.0, 31126.0], [865.0, 30217.0], [867.0, 30262.5], [871.0, 30691.0], [869.0, 30589.0], [877.0, 30752.0], [873.0, 30406.0], [887.0, 31105.0], [897.0, 31113.0], [925.0, 31908.0], [909.0, 17850.5], [907.0, 31240.0], [905.0, 31095.0], [911.0, 31392.0], [913.0, 31559.0], [915.0, 31871.0], [917.0, 31861.0], [921.0, 31836.0], [919.0, 31825.0], [957.0, 32000.0], [953.0, 31980.0], [949.0, 32019.0], [947.0, 32045.0], [945.0, 32063.0], [951.0, 32009.0], [959.0, 32025.0], [955.0, 32006.0], [935.0, 32091.0], [931.0, 31879.0], [929.0, 32012.0], [943.0, 32107.0], [941.0, 32223.0], [937.0, 32095.0], [965.0, 31973.0], [991.0, 31921.0], [977.0, 31883.0], [987.0, 31799.0], [963.0, 31894.0], [961.0, 31910.0], [975.0, 31853.0], [973.0, 31883.0], [971.0, 31869.0], [983.0, 31813.0], [981.0, 31869.0], [995.0, 31878.0], [1001.0, 22810.0], [1003.0, 31824.0], [993.0, 31791.0], [997.0, 31802.0], [999.0, 31852.0], [1021.0, 31814.0], [1009.0, 31824.0], [1011.0, 31792.0], [1013.0, 31907.0], [1019.0, 31871.0], [1017.0, 31828.0], [1015.0, 31757.0], [1074.0, 31860.0], [1062.0, 31722.0], [1086.0, 31676.0], [1058.0, 31737.0], [1038.0, 31733.0], [1034.0, 31752.0], [1030.0, 31740.5], [1026.0, 31746.0], [1054.0, 31817.0], [1050.0, 31796.0], [1042.0, 31828.0], [1066.0, 31739.0], [1146.0, 31768.0], [1150.0, 31680.0], [1126.0, 40039.0], [1122.0, 31745.0], [1130.0, 31663.0], [1142.0, 31647.0], [1138.0, 31642.0], [1118.0, 31556.0], [1090.0, 31673.0], [1094.0, 31684.0], [1098.0, 31643.0], [1102.0, 31610.5], [1114.0, 31581.0], [1110.0, 31558.0], [1106.0, 31585.0], [1134.0, 31630.0], [1214.0, 31583.0], [1186.0, 31577.0], [1190.0, 31564.5], [1194.0, 31597.0], [1198.0, 31616.0], [1210.0, 31597.0], [1206.0, 31586.0], [1202.0, 31585.0], [1182.0, 31620.0], [1154.0, 31707.0], [1158.0, 31690.0], [1162.0, 31693.0], [1166.0, 31710.0], [1178.0, 31613.0], [1174.0, 31682.0], [1170.0, 31680.0], [1226.0, 31720.0], [1218.0, 31609.0], [1246.0, 31858.5], [1238.0, 31566.0], [1234.0, 31649.0], [1230.0, 31668.0], [1222.0, 31591.0], [1266.0, 32292.0], [1270.0, 32207.0], [1250.0, 31776.0], [1258.0, 32328.0], [1262.0, 32824.0], [1278.0, 32603.5], [1274.0, 32543.0], [1310.0, 33533.0], [1298.0, 33251.0], [1302.0, 33229.0], [1306.0, 33283.0], [1294.0, 33066.0], [1290.0, 32926.0], [1286.0, 32931.0], [1282.0, 32621.0], [1330.0, 34452.0], [1334.0, 34464.0], [1322.0, 34445.0], [1318.0, 33872.0], [1314.0, 33614.0], [1326.0, 34327.0], [1342.0, 34651.0], [1338.0, 34527.0], [1406.0, 36485.0], [1378.0, 35732.0], [1382.0, 35671.0], [1386.0, 36250.0], [1390.0, 36102.0], [1402.0, 36509.0], [1398.0, 36623.0], [1394.0, 36157.0], [1346.0, 35208.0], [1350.0, 34596.0], [1354.0, 34585.0], [1358.0, 34635.0], [1374.0, 35808.0], [1370.0, 35701.0], [1366.0, 35101.0], [1362.0, 35005.0], [1470.0, 36771.0], [1442.0, 36768.0], [1446.0, 36913.0], [1450.0, 36856.0], [1454.0, 36666.0], [1466.0, 36640.0], [1462.0, 36663.0], [1458.0, 36724.0], [1422.0, 36865.0], [1418.0, 36868.0], [1414.0, 37160.0], [1410.0, 36871.0], [1438.0, 36998.0], [1434.0, 36814.0], [1430.0, 36811.0], [1426.0, 36795.0], [1482.0, 36711.0], [1498.0, 36584.0], [1494.0, 36649.0], [1490.0, 36486.0], [1486.0, 36630.0], [1522.0, 36501.0], [1526.0, 36415.5], [1510.0, 36526.0], [1506.0, 36402.0], [1518.0, 36321.0], [1534.0, 36382.0], [1530.0, 36376.0], [1542.0, 36306.0], [1538.0, 36342.0], [1546.0, 36281.0], [1566.0, 36186.5], [1562.0, 36192.5], [1558.0, 36300.0], [1554.0, 36227.0], [1570.0, 36164.0], [1578.0, 36300.0], [1582.0, 36276.0], [1598.0, 36113.0], [1594.0, 36139.0], [1590.0, 36185.0], [1586.0, 36067.0], [1550.0, 36264.5], [1650.0, 36142.0], [1642.0, 22293.0], [1638.0, 36222.0], [1634.0, 35889.0], [1646.0, 36173.0], [1602.0, 36012.0], [1606.0, 35999.0], [1610.0, 35958.0], [1614.0, 35918.0], [1630.0, 35869.0], [1626.0, 35882.5], [1622.0, 35937.0], [1618.0, 36390.0], [1654.0, 36136.0], [1662.0, 36068.0], [1658.0, 36119.0], [1670.0, 35977.0], [1674.0, 36107.0], [1666.0, 36017.0], [1678.0, 35958.0], [1694.0, 35904.0], [1690.0, 35903.0], [1686.0, 36010.0], [1714.0, 22044.0], [1698.0, 36041.0], [1706.0, 35921.0], [1710.0, 35945.0], [1726.0, 35742.0], [1722.0, 35792.5], [1718.0, 35815.0], [1790.0, 34997.0], [1762.0, 35194.0], [1766.0, 35206.0], [1770.0, 35191.5], [1774.0, 35095.0], [1786.0, 35441.0], [1778.0, 35046.0], [1742.0, 35526.0], [1738.0, 35589.0], [1734.0, 35697.0], [1730.0, 35720.0], [1758.0, 35494.0], [1754.0, 35436.333333333336], [1750.0, 35326.0], [1850.0, 34297.0], [1854.0, 34324.0], [1826.0, 34627.0], [1830.0, 34556.0], [1834.0, 34535.0], [1838.0, 34503.0], [1846.0, 34350.0], [1842.0, 34403.0], [1806.0, 34737.0], [1802.0, 34862.0], [1798.0, 34933.0], [1794.0, 34720.0], [1822.0, 34661.0], [1818.0, 34718.0], [1814.0, 34798.0], [1914.0, 33762.0], [1906.0, 33831.0], [1918.0, 34143.0], [1894.0, 17451.333333333336], [1898.0, 33814.0], [1902.0, 33984.0], [1886.0, 33905.0], [1858.0, 34320.0], [1862.0, 34225.0], [1866.0, 34207.0], [1870.0, 34076.0], [1882.0, 33972.0], [1874.0, 34073.0], [1910.0, 33609.0], [1890.0, 33974.0], [1926.0, 33645.0], [1982.0, 33567.13333333333], [1922.0, 33543.0], [1930.0, 33610.0], [1934.0, 34111.0], [1950.0, 34226.0], [1946.0, 33615.0], [1942.0, 33591.0], [1938.0, 33505.0], [1958.0, 33328.0], [1954.0, 33344.0], [1998.0, 21311.0], [1986.0, 33020.0], [1990.0, 32892.0], [1075.0, 31726.0], [1083.0, 31763.5], [1063.0, 31795.0], [1059.0, 31750.0], [1067.0, 31804.0], [1079.0, 31657.5], [1039.0, 31737.0], [1035.0, 31782.0], [1031.0, 31724.0], [1027.0, 31737.0], [1055.0, 31777.0], [1051.0, 31801.0], [1043.0, 31827.0], [1071.0, 31698.5], [1091.0, 31646.0], [1095.0, 31664.0], [1119.0, 31605.0], [1115.0, 31576.0], [1111.0, 31547.0], [1107.0, 31576.0], [1099.0, 18436.0], [1151.0, 31672.0], [1123.0, 31597.0], [1127.0, 31581.0], [1131.0, 31662.0], [1135.0, 31763.0], [1147.0, 31705.0], [1143.0, 31776.0], [1139.0, 31707.0], [1207.0, 31575.0], [1191.0, 31594.0], [1215.0, 31601.0], [1187.0, 31560.0], [1195.0, 31580.0], [1199.0, 31557.0], [1183.0, 31592.0], [1155.0, 31661.0], [1159.0, 31707.0], [1163.0, 31714.0], [1167.0, 31764.0], [1179.0, 31622.0], [1175.0, 31635.0], [1171.0, 31688.0], [1227.0, 31654.0], [1267.0, 32277.0], [1275.0, 33032.0], [1247.0, 31679.0], [1219.0, 31608.0], [1243.0, 31698.5], [1239.0, 31588.0], [1235.0, 31614.0], [1231.0, 31655.0], [1223.0, 31670.0], [1251.0, 32032.0], [1255.0, 32156.0], [1259.0, 32363.0], [1263.0, 32338.0], [1271.0, 32689.0], [1283.0, 33285.0], [1291.0, 33755.0], [1331.0, 34437.0], [1299.0, 33257.0], [1303.0, 35661.0], [1307.0, 33575.0], [1295.0, 33026.0], [1287.0, 33071.0], [1311.0, 33750.0], [1323.0, 34334.0], [1319.0, 34422.0], [1327.0, 34318.0], [1335.0, 34457.0], [1403.0, 36401.0], [1407.0, 36494.0], [1379.0, 35729.0], [1383.0, 35788.0], [1387.0, 36204.0], [1391.0, 36120.0], [1399.0, 36363.0], [1395.0, 36142.0], [1375.0, 35244.0], [1347.0, 34566.0], [1351.0, 34637.0], [1355.0, 34873.0], [1359.0, 35041.0], [1371.0, 35216.0], [1367.0, 35164.0], [1363.0, 35354.0], [1467.0, 36689.0], [1471.0, 36668.0], [1443.0, 36925.0], [1447.0, 36914.0], [1451.0, 37284.0], [1455.0, 36672.0], [1463.0, 36898.0], [1459.0, 37154.0], [1423.0, 36814.0], [1439.0, 36969.0], [1435.0, 36970.0], [1431.0, 37010.0], [1427.0, 36812.0], [1483.0, 36548.0], [1503.0, 36519.666666666664], [1499.0, 36577.0], [1495.0, 36632.0], [1491.0, 36635.0], [1487.0, 36658.0], [1479.0, 36637.0], [1475.0, 36664.0], [1527.0, 36407.0], [1511.0, 36722.0], [1515.0, 36354.0], [1535.0, 36364.0], [1531.0, 36426.0], [1543.0, 36288.0], [1587.0, 36218.0], [1539.0, 36329.0], [1567.0, 36203.0], [1559.0, 36210.0], [1555.0, 36220.0], [1599.0, 36102.0], [1571.0, 36129.0], [1575.0, 36318.5], [1579.0, 36076.0], [1583.0, 36055.0], [1591.0, 36191.0], [1551.0, 36241.0], [1651.0, 36138.0], [1639.0, 36263.0], [1635.0, 35999.0], [1643.0, 36149.0], [1647.0, 36249.0], [1631.0, 35879.0], [1603.0, 36010.0], [1615.0, 35905.0], [1623.0, 36364.0], [1619.0, 35877.0], [1655.0, 36193.0], [1663.0, 36052.0], [1659.0, 36068.0], [1671.0, 35975.0], [1675.0, 22020.5], [1667.0, 36122.0], [1695.0, 35911.0], [1691.0, 35895.0], [1687.0, 35927.0], [1683.0, 35929.0], [1727.0, 35754.0], [1699.0, 35894.0], [1703.0, 35955.0], [1707.0, 35959.0], [1711.0, 35820.0], [1723.0, 35780.0], [1715.0, 35857.0], [1787.0, 34753.0], [1779.0, 35015.0], [1791.0, 34788.0], [1763.0, 35506.0], [1767.0, 35040.0], [1771.0, 35184.0], [1775.0, 35076.0], [1783.0, 34942.5], [1743.0, 35429.0], [1739.0, 35516.0], [1735.0, 35722.0], [1759.0, 35456.0], [1755.0, 35481.0], [1751.0, 35316.0], [1747.0, 35518.0], [1855.0, 34322.0], [1847.0, 34338.0], [1843.0, 34478.0], [1851.0, 34329.0], [1827.0, 34836.0], [1831.0, 34540.0], [1835.0, 34685.0], [1839.0, 34463.0], [1803.0, 34774.0], [1799.0, 34879.0], [1795.0, 34828.0], [1823.0, 34585.0], [1815.0, 34669.0], [1811.0, 34974.5], [1907.0, 21468.5], [1895.0, 21525.0], [1899.0, 33834.0], [1903.0, 34349.0], [1863.0, 34251.0], [1867.0, 34222.0], [1871.0, 34031.0], [1883.0, 33961.0], [1879.0, 34329.0], [1875.0, 34039.0], [1911.0, 33712.0], [1919.0, 33611.0], [1915.0, 33871.0], [1931.0, 33646.0], [1955.0, 34234.0], [1959.0, 33312.0], [1983.0, 33089.0], [1951.0, 33384.0], [1923.0, 33554.0], [1927.0, 33706.0], [1935.0, 34182.0], [1947.0, 33454.0], [1943.0, 33490.0], [1939.0, 34123.0], [1963.0, 33282.0], [1987.0, 32904.0], [1999.0, 32886.0], [1995.0, 32970.0], [1991.0, 32970.0]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}, {"data": [[1541.5295158080958, 29110.16228167144]], "isOverall": false, "label": "Accelerometer ingest-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 143.55, "minX": 1.6201248E12, "maxY": 171865.7, "series": [{"data": [[1.62012492E12, 9620.7], [1.6201248E12, 143.55], [1.62012486E12, 13193.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62012492E12, 120918.4], [1.6201248E12, 1889.35], [1.62012486E12, 171865.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62012492E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 961.9655172413793, "minX": 1.6201248E12, "maxY": 29332.11260775867, "series": [{"data": [[1.62012492E12, 29332.11260775867], [1.6201248E12, 961.9655172413793], [1.62012486E12, 29263.4442759666]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62012492E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 961.9310344827585, "minX": 1.6201248E12, "maxY": 29331.85991379316, "series": [{"data": [[1.62012492E12, 29331.85991379316], [1.6201248E12, 961.9310344827585], [1.62012486E12, 29263.21228203182]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62012492E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 14.103448275862068, "minX": 1.6201248E12, "maxY": 19.662176724137954, "series": [{"data": [[1.62012492E12, 19.662176724137954], [1.6201248E12, 14.103448275862068], [1.62012486E12, 19.05269143290371]], "isOverall": false, "label": "Accelerometer ingest", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62012492E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 738.0, "minX": 1.6201248E12, "maxY": 47151.0, "series": [{"data": [[1.62012492E12, 40039.0], [1.6201248E12, 1142.0], [1.62012486E12, 47151.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62012492E12, 16059.0], [1.6201248E12, 738.0], [1.62012486E12, 2868.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62012492E12, 36218.6], [1.6201248E12, 1116.0], [1.62012486E12, 37295.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62012492E12, 36921.58], [1.6201248E12, 1142.0], [1.62012486E12, 43805.19000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62012492E12, 36598.15], [1.6201248E12, 1129.0], [1.62012486E12, 38028.049999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62012492E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3313.0, "minX": 2.0, "maxY": 38325.0, "series": [{"data": [[2.0, 3313.0], [3.0, 7052.0], [4.0, 9115.0], [5.0, 23675.0], [7.0, 7860.0], [10.0, 10737.0], [11.0, 5083.0], [12.0, 16812.5], [13.0, 12228.0], [16.0, 9684.0], [18.0, 16689.0], [20.0, 17738.5], [21.0, 28585.0], [22.0, 26424.5], [23.0, 31504.0], [24.0, 16044.0], [25.0, 15283.0], [26.0, 30519.5], [27.0, 18634.0], [29.0, 18814.5], [31.0, 28124.0], [33.0, 35271.0], [35.0, 24430.0], [34.0, 35881.0], [40.0, 35782.0], [42.0, 37096.5], [45.0, 31055.0], [46.0, 19795.5], [47.0, 34297.5], [49.0, 38325.0], [50.0, 32065.5], [52.0, 34589.5], [55.0, 34064.0], [54.0, 33968.5], [56.0, 35075.5], [61.0, 35814.0], [73.0, 35840.0], [72.0, 33548.5], [84.0, 35498.5], [87.0, 36010.0], [90.0, 34590.5], [93.0, 36075.0], [98.0, 32928.0], [105.0, 36300.0], [108.0, 31783.0], [114.0, 25359.5], [112.0, 32153.5], [119.0, 31625.0], [124.0, 32453.5], [131.0, 25127.0], [172.0, 25621.5], [169.0, 31222.0], [194.0, 24575.0], [264.0, 23543.0], [256.0, 18401.0], [297.0, 28418.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 297.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3313.0, "minX": 2.0, "maxY": 38325.0, "series": [{"data": [[2.0, 3313.0], [3.0, 7052.0], [4.0, 9115.0], [5.0, 23675.0], [7.0, 7860.0], [10.0, 10737.0], [11.0, 5083.0], [12.0, 16812.5], [13.0, 12228.0], [16.0, 9684.0], [18.0, 16689.0], [20.0, 17738.5], [21.0, 28585.0], [22.0, 26424.5], [23.0, 31504.0], [24.0, 16044.0], [25.0, 15283.0], [26.0, 30519.5], [27.0, 18634.0], [29.0, 18814.5], [31.0, 28124.0], [33.0, 35270.0], [35.0, 24430.0], [34.0, 35880.5], [40.0, 35782.0], [42.0, 37095.5], [45.0, 31054.5], [46.0, 19795.5], [47.0, 34297.5], [49.0, 38325.0], [50.0, 32064.5], [52.0, 34589.5], [55.0, 34057.0], [54.0, 33968.0], [56.0, 35075.0], [61.0, 35813.0], [73.0, 35840.0], [72.0, 33548.5], [84.0, 35498.5], [87.0, 36010.0], [90.0, 34590.5], [93.0, 36075.0], [98.0, 32928.0], [105.0, 36299.0], [108.0, 31782.0], [114.0, 25359.5], [112.0, 32153.5], [119.0, 31625.0], [124.0, 32453.5], [131.0, 25127.0], [172.0, 25621.5], [169.0, 31222.0], [194.0, 24575.0], [264.0, 23543.0], [256.0, 18401.0], [297.0, 28418.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 297.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.833333333333334, "minX": 1.6201248E12, "maxY": 66.55, "series": [{"data": [[1.6201248E12, 8.833333333333334], [1.62012486E12, 66.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62012486E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.6201248E12, "maxY": 43.96666666666667, "series": [{"data": [[1.62012492E12, 30.933333333333334], [1.6201248E12, 0.48333333333333334], [1.62012486E12, 43.96666666666667]], "isOverall": false, "label": "202", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62012492E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.6201248E12, "maxY": 43.96666666666667, "series": [{"data": [[1.62012492E12, 30.933333333333334], [1.6201248E12, 0.48333333333333334], [1.62012486E12, 43.96666666666667]], "isOverall": false, "label": "Accelerometer ingest-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62012492E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.6201248E12, "maxY": 43.96666666666667, "series": [{"data": [[1.62012492E12, 30.933333333333334], [1.6201248E12, 0.48333333333333334], [1.62012486E12, 43.96666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62012492E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

